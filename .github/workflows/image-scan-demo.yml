name: Image Build and Scan

on:
  pull_request:
    branches:
      - main  # or your default branch
  workflow_dispatch:  # allows manual run from GitHub UI

jobs:
  orca_security_image_scan:
    name: Orca Security Image Scan
    runs-on: ubuntu-latest
    env: 
      IMAGE_NAME: postgres:latest
      PROJECT_KEY: image-ardy # Set the desired project to run the cli scanning with
    
    steps:
    # checks-out your repository under $GitHub_WORKSPACE, so your workflow can access it.
    - name: Checkout
      uses: actions/checkout@v2

    # Build your docker image, that is going to be scanned in the next step
    - name: Docker Image Build
      run: docker build -t postgres:latest .
  
    # Run Orca CLI against the previously created container image
    - name: Orca CLI - Security Scanning
      env:
        ORCA_SECURITY_API_TOKEN: ${{ secrets.ORCA_SECURITY_API_TOKEN }}
      run: |
        set +e
        sudo apt update && sudo apt install -y curl
        curl -sfL 'https://raw.GitHubusercontent.com/orcasecurity/orca-cli/main/install.sh' | bash
        orca-cli -p "${PROJECT_KEY}" image scan ${IMAGE_NAME} --output orca-scan-summary.json --format json

     # *** New Step: Transform Orca results to Annotations JSON ***
    - name: Create Annotations File from Orca Scan
      id: transform_results
      if: always() # Run even if the scan step failed based on exit code
      uses: actions/github-script@v7
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Use default token
          script: |
            const fs = require('fs');
            const annotations = [];
            let scanResults;

            try {
              scanResults = JSON.parse(fs.readFileSync('orca-scan-summary.json', 'utf8'));
            } catch (error) {
              console.error("Failed to read or parse orca-scan-summary.json:", error);
              // Create a single annotation indicating the failure
              annotations.push({
                path: '.github/workflows/image-scan-demo (2).yml', // Match your workflow file name
                start_line: 1,
                end_line: 1,
                annotation_level: 'failure',
                title: 'Orca Scan Processing Error',
                message: 'Could not read or parse orca-scan-summary.json. Check scan step output.'
              });
              fs.writeFileSync('annotations.json', JSON.stringify(annotations));
              core.setOutput('annotations_created', 'true');
              return; // Stop script execution
            }

            // --- Helper function to map Orca severity to GitHub annotation level ---
            function mapSeverity(orcaSeverity) {
              switch (orcaSeverity?.toLowerCase()) {
                case 'critical':
                case 'high':
                  return 'failure'; // Treat high/critical as failure annotations
                case 'medium':
                  return 'warning'; // Treat medium as warning
                case 'low':
                   return 'notice'; // Treat low as notice (less noise)
                default:
                  return 'notice'; // For unknown or informational
              }
            }

            // --- Process Vulnerabilities ---
            // Corrected access logic: iterate scanResults.vulnerabilities, then access item.vulnerabilities
            if (scanResults.vulnerabilities && Array.isArray(scanResults.vulnerabilities)) {
              scanResults.vulnerabilities.forEach(vulnCategory => {
                 // *** Corrected check: use vulnCategory.vulnerabilities ***
                 if (vulnCategory.vulnerabilities && Array.isArray(vulnCategory.vulnerabilities)) {
                    vulnCategory.vulnerabilities.forEach(vuln => {
                      annotations.push({
                        path: 'Dockerfile', // Or omit path if not directly applicable
                        start_line: 1, // Placeholder line
                        end_line: 1,   // Placeholder line
                        annotation_level: mapSeverity(vuln.severity),
                        title: `Vulnerability: ${vuln.vulnerability_id || 'N/A'} (${vuln.pkg_name || 'N/A'})`,
                        message: `[${vuln.severity || 'Unknown'}] Package: ${vuln.pkg_name}@${vuln.installed_version || 'N/A'}. Fixed in: ${vuln.fixed_version || 'Not available'}. Type: ${vulnCategory.type || 'N/A'}`
                      });
                    });
                 }
              });
            }

            // --- Process Best Practice Findings ---
            // Corrected access logic: directly access scanResults.results.container_image_best_practices.results
            const bestPractices = scanResults.results?.container_image_best_practices?.results;
            if (bestPractices && Array.isArray(bestPractices)) {
               bestPractices.forEach(finding => {
                 // Map Orca 'priority' (HIGH, MEDIUM, LOW) for best practices
                 const annotationLevel = mapSeverity(finding.priority);
                 // Only create annotations for failed/warning best practices
                 if (finding.status === 'FAILED' || finding.status === 'WARNING') {
                     annotations.push({
                       path: 'Dockerfile', // Best practices often relate to the Dockerfile
                       start_line: 1, // Placeholder - real line number might require Dockerfile parsing
                       end_line: 1,   // Placeholder
                       annotation_level: annotationLevel,
                       title: `Best Practice (${finding.priority}): ${finding.catalog_control?.title || 'N/A'}`, // Use catalog_control for title
                       message: `Status: ${finding.status}. Finding: ${finding.findings?.[0] || finding.catalog_control?.recommendation || 'Details unavailable'}` // Show finding or recommendation
                     });
                 }
               });
            }

            // --- Write the annotations file ---
            if (annotations.length > 0) {
              fs.writeFileSync('annotations.json', JSON.stringify(annotations, null, 2)); // Added pretty print
              core.setOutput('annotations_created', 'true');
              console.log(`Created annotations.json with ${annotations.length} annotations.`);
            } else {
              // This message should now only appear if the JSON truly has no findings matching the criteria
              console.log('No specific findings matched criteria to create annotations for.');
              core.setOutput('annotations_created', 'false');
            }
            // ** Ensure no duplicated code blocks exist below this line within the script: block **

      # *** New Step: Add Annotations using the created file ***
    - name: Add Scan Annotations
      if: always() && steps.transform_results.outputs.annotations_created == 'true' # Run if annotations file was created
      uses: yuzutech/annotations-action@v0.4.0 # Check for latest version
      with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          title: 'Orca Security Scan Findings' # Title for the Check run
          input: './annotations.json'


    - name: Comment on PR with Orca Scan Summary
      if: always() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PAT_COMMENT }}
        script: |
          const fs = require('fs');
          const scan = JSON.parse(fs.readFileSync('orca-scan-summary.json', 'utf8'));
          const MAX_ITEMS_TO_LIST = 5; // Max vulnerabilities/controls to list directly

          const controls = scan.controls_count || { passed: 0, warning: 0, failed: 0 };
          const vulns = scan.vulnerabilities_count || { critical: 0, high: 0, medium: 0, low: 0, unknown: 0 };
          const policies = scan.policies_summary || [];
          const resultsUrl = scan.results_url || '#'; // Default URL if not found

          // --- Extract Top Critical/High Vulnerabilities ---
          let topVulns = [];
          if (scan.vulnerabilities && Array.isArray(scan.vulnerabilities)) {
            scan.vulnerabilities.forEach(cat => {
              if (cat.vulnerabilities && Array.isArray(cat.vulnerabilities)) {
                topVulns.push(...cat.vulnerabilities);
              }
            });
          }
          // Sort by severity (crit -> high -> med -> low -> unknown) then filter top N
          const severityOrder = { critical: 5, high: 4, medium: 3, low: 2, unknown: 1 };
          topVulns.sort((a, b) => (severityOrder[b.severity?.toLowerCase()] || 0) - (severityOrder[a.severity?.toLowerCase()] || 0));
          topVulns = topVulns
            .filter(v => v.severity?.toLowerCase() === 'critical' || v.severity?.toLowerCase() === 'high')
            .slice(0, MAX_ITEMS_TO_LIST);

          let topVulnsList = 'None found.';
          if (topVulns.length > 0) {
             topVulnsList = `| Severity | Package | Version | Fixed In | ID |\n`;
             topVulnsList += `|---|---|---|---|---|\n`;
             topVulnsList += topVulns.map(v =>
               `| ${v.severity || 'N/A'} | ${v.pkg_name || 'N/A'} | ${v.installed_version || 'N/A'} | ${v.fixed_version || 'N/A'} | ${v.vulnerability_id || 'N/A'} |`
             ).join('\n');
             if (vulns.critical + vulns.high > MAX_ITEMS_TO_LIST) {
                 topVulnsList += `\n*... and ${vulns.critical + vulns.high - MAX_ITEMS_TO_LIST} more critical/high vulnerabilities.*`;
             }
          }

          // --- Extract Failed Controls/Best Practices ---
          let failedControls = [];
          const bestPractices = scan.results?.container_image_best_practices?.results;
          if (bestPractices && Array.isArray(bestPractices)) {
             failedControls = bestPractices
                .filter(c => c.status === 'FAILED') // Only show failed controls
                .slice(0, MAX_ITEMS_TO_LIST);
          }

          let failedControlsList = 'None found.';
          if (failedControls.length > 0) {
             failedControlsList = failedControls.map(c =>
               `- ❌ **${c.catalog_control?.title || 'Unknown Control'}** (Priority: ${c.priority || 'N/A'})\n   *Finding:* ${c.findings?.[0] || c.catalog_control?.recommendation || 'Details unavailable'}`
             ).join('\n');
             if (controls.failed > MAX_ITEMS_TO_LIST) {
                 failedControlsList += `\n*... and ${controls.failed - MAX_ITEMS_TO_LIST} more failed controls.*`;
             }
          }

          // --- Extract Failed Policies ---
          const failedPoliciesList = policies
            .filter(p => p.failed)
            .map(p => `- ❌ **${p.policy_name}**`)
            .join('\n') || '✅ No failed policies';

          // --- Construct the Comment Body ---
          const commentBody = `
          🛡️ **Orca Security Scan Summary**

          🔗 [View Full Results in Orca Security Console](${resultsUrl})

          ---
          ### Summary Counts
          | Category | Critical | High | Medium | Low | Unknown | Failed | Warning | Passed | Total |
          |---|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
          | **Vulnerabilities** | ${vulns.critical} | ${vulns.high} | ${vulns.medium} | ${vulns.low} | ${vulns.unknown} | - | - | - | **${vulns.total || 0}** |
          | **Controls** | - | - | - | - | - | ${controls.failed} | ${controls.warning} | ${controls.passed} | **${controls.total || 0}** |

          ---
          ### Top Critical/High Vulnerabilities (Max ${MAX_ITEMS_TO_LIST})
          ${topVulnsList}

          ---
          ### Failed Controls (Max ${MAX_ITEMS_TO_LIST})
          ${failedControlsList}

          ---
          ### Failed Policies
          ${failedPoliciesList}

          ---
          **Action Required:** Please review the findings, especially critical/high vulnerabilities and failed controls/policies. Address them or consult with the security team before merging. Use the full results link above for complete details.
          `;

          // --- Create the Comment ---
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: commentBody
          });
