name: Image Build and Scan

on:
  pull_request:
    branches:
      - main  # or your default branch
  workflow_dispatch:  # allows manual run from GitHub UI

jobs:
  build-cli:
    name: build-cli
    runs-on: ubuntu-latest
    env: 
      IMAGE_NAME: postgres:latest
      PROJECT_KEY: default # Set the desired project to run the cli scanning with
    
    steps:
    # checks-out your repository under $GitHub_WORKSPACE, so your workflow can access it.
    - name: Checkout
      uses: actions/checkout@v2

    # Build your docker image, that is going to be scanned in the next step
    - name: Docker Image Build
      run: docker build -t postgres:latest .
  
    # Run Orca CLI against the previously created container image
    - name: Orca CLI - Security Scanning
      env:
        ORCA_SECURITY_API_TOKEN: ${{ secrets.ORCA_SECURITY_API_TOKEN }}
      run: |
        set +e
        sudo apt update && sudo apt install -y curl
        curl -sfL 'https://raw.GitHubusercontent.com/orcasecurity/orca-cli/main/install.sh' | bash
        orca-cli -p "${PROJECT_KEY}" image scan ${IMAGE_NAME} --output orca-scan-summary.json --format json

    - name: Comment on PR with Orca Scan Summary
      if: always() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PAT_COMMENT }}
        script: |
          const fs = require('fs');
          const scan = JSON.parse(fs.readFileSync('orca-scan-summary.json', 'utf8'));
    
          const controls = scan.controls_count;
          const vulns = scan.vulnerabilities_count;
          const policies = scan.policies_summary;
    
          const failedPolicies = policies
            .filter(p => p.failed)
            .map(p => `- ❌ **${p.policy_name}**`)
            .join('\n') || '✅ No failed policies';
    
          const summary = `
          🛡️ **Orca Security Scan Summary**
          
          🔗 [View full results in Orca Security Console](${scan.results_url})
          
          **Controls**
          - ✅ Passed: ${controls.passed}
          - ⚠️ Warnings: ${controls.warning}
          - ❌ Failed: ${controls.failed}
          
          **Vulnerabilities**
          - 🟥 Critical: ${vulns.critical}
          - 🟧 High: ${vulns.high}
          - 🟨 Medium: ${vulns.medium}
          - 🟦 Low: ${vulns.low}
          - ❓ Unknown: ${vulns.unknown}
          
          **Failed Policies**
          ${failedPolicies}
          `;
    
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });










  
